<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>微信小程序切换测试/生产环境</title>
    <url>/2020/01/02/minipro-config/</url>
    <content><![CDATA[<p>之前工作的步骤都是,如果需要修改Bug或者完成需求的话，需要 新建分支，然后 做一个 pull request 的操作。</p>
<p>然后因为修改Bug/完成需求 都是在开发环境下进行,所以 我们的大佬考虑到如果真的需要上传审核的话,怕是把开发环境上传成了项目的正式版。</p>
<p>因此,就要做一个确保 GIT 上 master上的 URL 和 APPID 皆为生产环境，因此有了今天的文章。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li><p>可以把 <strong>project.config.json</strong> 的 <strong>appid</strong> 设为生产环境</p>
</li>
<li><p>然后把 <strong>.gitignore</strong> 文件上添加该文件，便可以每一次分支上传的时候都会忽略该文件。（即保证<strong>master</strong>上<strong>appid</strong>为生产环境）</p>
</li>
<li><p>新建个切换 URL 的JS 。默认为 生产环境。-&gt; 给个console.log，如果为开发环境，则报错</p>
</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h2 id="project-config-json"><a href="#project-config-json" class="headerlink" title="project.config.json"></a>project.config.json</h2><ol>
<li><p>修改  <strong>appid</strong> 为 生产环境的 <strong>appid</strong></p>
</li>
<li><p>修改 【setting】-  <strong>urlCheck:true</strong></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;setting&quot;:&#123;</span><br><span class="line">  &quot;urlCheck&quot;:true    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个是确保我们开发或者运维人员使用工具的时候都是需要 “校验合法域名”。让上传版本的人员能注意到小程序所给的错误。</p>
<h2 id="config-js，来切换环境"><a href="#config-js，来切换环境" class="headerlink" title="config.js，来切换环境"></a>config.js，来切换环境</h2><ol>
<li>上代码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let env &#x3D; &quot;prod&quot;</span><br><span class="line">if(env &#x3D;&#x3D; &quot;dev&quot;)&#123;</span><br><span class="line">  &#x2F;&#x2F; 这里是加一个console.error  在打开的时候告诉 开发&#x2F;运维人员 现在的环境</span><br><span class="line">  console.error(&quot;Environment:dev\n 当前环境为测试环境,如需要上传版本\n 请前往config.js,修改变量env &#x3D;&#39;pro&#39;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">let config &#x3D; &#123;</span><br><span class="line">  url:config_url(env)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function config_url(env)&#123;</span><br><span class="line">  let Url &#x3D; &#39;&#39;</span><br><span class="line">  if(env &#x3D;&#x3D; &quot;dev&quot;)&#123;</span><br><span class="line">    Url&#x3D;&quot;https:&#x2F;&#x2F;unicard.ceshi.bingoapp.cn&quot;</span><br><span class="line">  &#125;else if(env &#x3D;&#x3D; &quot;prod&quot;)&#123;</span><br><span class="line">    Url&#x3D;&quot;https:&#x2F;&#x2F;unicard.bingoapp.cn&quot;  </span><br><span class="line">  &#125;</span><br><span class="line">  return Url</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; config;</span><br></pre></td></tr></table></figure>

<h2 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h2><ol>
<li>这里也只是单纯的引入与赋值</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var config &#x3D; require(&#39;.&#x2F;config.js&#39;)</span><br><span class="line">const URL &#x3D; config.url</span><br><span class="line"></span><br><span class="line">App(&#123;</span><br><span class="line">  globalData:&#123;</span><br><span class="line">    url: URL</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><ol>
<li>这里其实争了挺久，究竟把不把 我们的 Config.js 添加进去。因为属于配置文件去掉了，以后可能需要配置的东西就需要重复步骤了。所以这里就看需要，需求加进去，加了进去 就能确保每次都是进来包括上传都是生产环境[只要不修改config.js]。这里我就没加了，因为这边大佬说可能以后需要添加的东西还有，所以就没把他进去了（-.- 其实还有什么可以加嘛.基本的东西都在了..还能加什么嘛…..）。</li>
</ol>
<p>.gitignore 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules</span><br><span class="line">project.config.json</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>这里可能第一次修改了，但是他不生效阿。这里有解决办法。</p>
<p>   $ git rm -r –cached  .<br>   $ git add .<br>   $ git commit -m “demo”<br>   $ git pull<br>   $ git push </p>
</li>
</ol>
<p>参考文章:<a href="https://www.cnblogs.com/rainbowk/p/10932322.html" target="_blank" rel="noopener" title="参考文章">https://www.cnblogs.com/rainbowk/p/10932322.html</a></p>
<p>参考文章:<a href=""参考文章"">https://www.cnblogs.com/kevingrace/p/5690241.html</a></p>
]]></content>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Change Theme</title>
    <url>/2019/12/27/changeTheme/</url>
    <content><![CDATA[<h2 id="博客主题皮肤"><a href="#博客主题皮肤" class="headerlink" title="博客主题皮肤"></a>博客主题皮肤</h2><p>&emsp; 我第一次新建的blog,主题是 <strong>landscape</strong>。当时觉得这个主题还好。足够日常需求了啦。但是自从我看了那些 炫酷的，高大上， 科技感十足的blog，我也就想着去换这个比较成熟稳重的主题了。(毕竟我也想让你们进来我的blog，觉得眼前一亮的感觉嘛)</p>
<h2 id="第一步-寻找符合自己的主题"><a href="#第一步-寻找符合自己的主题" class="headerlink" title="第一步:寻找符合自己的主题"></a>第一步:寻找符合自己的主题</h2><p>&emsp; 当然啦，<strong>Hexo</strong> 也有这个 <a href="https://hexo.io/themes/" target="_blank" rel="noopener" title="主题的版块">主题的版块</a>，可以任意随你挑选的。</p>
<p><img src="theme.png" alt="主题板块"></p>
<a id="more"></a>

<h2 id="选好主题，进入作者的github，进行安装！"><a href="#选好主题，进入作者的github，进行安装！" class="headerlink" title="选好主题，进入作者的github，进行安装！"></a>选好主题，进入作者的github，进行安装！</h2><p>&emsp; 基本上每个作者,下面的介绍都会跟你说怎么下载，安装的了。这里举个我的例子吧。</p>
<p><strong>安装</strong></p>
<pre><code>$ git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</code></pre><p><strong>修改配置</strong><br>需要修改根目录的<code>_config.yml</code>文件里的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: ayer   &#x2F;&#x2F;拉到最后，修改他的值。你的主题是什么就是什么值</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&emsp; <strong>不过你需要详细阅读作者给出的文档，因为上面有很多功能插件需要安装。耐心点。看完作者写的东西吧~</strong></p>
]]></content>
  </entry>
  <entry>
    <title>初次使用Hexo搭建blog。</title>
    <url>/2019/12/26/hello-world/</url>
    <content><![CDATA[<h2 id="为什么会接触到-Hexo-？"><a href="#为什么会接触到-Hexo-？" class="headerlink" title="为什么会接触到 Hexo ？"></a>为什么会接触到 Hexo ？</h2><p>  &emsp;这个是我在项目里面遇到需要做的SEO搜索引擎优化,一位大佬介绍给我看的一个东西，虽然好像这些东西表面看起来与需求不相关，但我觉得其实也是学习成长的一部分嘛。</p>
<p>   &emsp;其实我有个想法，如果可以把 <strong>hexo</strong> 做成一个简单的产品网页的介绍(毕竟我们公司经常会有这种莫名其妙的需求，一个小的demo，所以其实这个也是可以试的)。但其实要做的话其实还有更多的选择，毕竟主流框架很多,如 bootstarp响应式，vue,react等等框架，所以嘛虽然没能解决现阶段问题，我们可以先hold 一下，学习一下，来增加知识贮备。反正学到的是自己啊哈。</p>
<h2 id="Hexo-好处"><a href="#Hexo-好处" class="headerlink" title="Hexo 好处"></a>Hexo 好处</h2><p>&emsp;* <strong>免费</strong> <strong>免费!</strong> <strong>免费！</strong>不需要花钱，就可以拥有，而且也不需要服务器和后台。<br>&emsp;* 博客内容可以轻松打包、转移、发布<br>&emsp;* 可以随意绑定自己的域名，默认域名也不会失效，会自动跳转到新的域名<br>&emsp;* 等等</p>
<h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><a id="more"></a>
<p>  &emsp;其实不怎么想说安装流程，因为文档写的一清二楚了，但是还是照顾一下金鱼记忆的我。</p>
<h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提:"></a>安装前提:</h3><p>  &emsp;1.<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本) </p>
<p>  &emsp;查看版本号</p>
<pre><code>$ node -v</code></pre><p>  &emsp;2.Git(这个不用说了吧,按照文档走就好了。)</p>
<h3 id="安装-Hexo："><a href="#安装-Hexo：" class="headerlink" title="安装 Hexo："></a>安装 Hexo：</h3><pre><code>$ npm install hexo </code></pre><p>&emsp;可以用 命令行 <strong>hexo-v</strong> 查看安装是否成功，版本号</p>
<pre><code>$ hexo -v</code></pre><h2 id="搭建blog"><a href="#搭建blog" class="headerlink" title="搭建blog"></a>搭建blog</h2><!-- 【1】 &emsp;或&#8195; //全角
【2】 &ensp;或&#8194; //半角
【3】 &nbsp;或&#160;  //半角之半角 -->
<h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4><p>&emsp;1.新建一个github账号(有的话直接忽略)</p>
<p>&emsp;2.github上新建一个仓库，仓库名字:username.github.io。<br>&emsp;&emsp;例如我的账号名是 abson,那么仓库名就是 abson.github.io<br>&emsp;&emsp;因为以后你可以直接访问 xxx.github.io 就可以看到你的blog 了</p>
<p>&emsp;3.生成SSH key<br>&emsp;回到您的git bash 上</p>
<pre><code>$ git config --global user.name &quot;yourname&quot;
$ git config --global user.email &quot;youremail&quot;</code></pre><p>&emsp; 输入 用户名 和 邮箱<br>&emsp; 可以由下面的两个命令查看你是否输入错误</p>
<pre><code>$ git config user.name
$ git config user.email</code></pre><p>&emsp; 然后 创建 ssh key </p>
<pre><code>$ ssh-keygen -t rsa -C &quot;youremail&quot;</code></pre><p>&emsp; 就会生成SSH key ，你需要找到 <strong>.ssh</strong> 文件夹，找到<strong>id_rsa.pub</strong>文件，把里面的内容复制，然后到github 设置 添加 sshkey 密钥，title 随便写就好了</p>
<p>&emsp; 如果你实在不知道这个文件在哪，你可以 git bash 输入命令,查看到大概位置</p>
<pre><code>$   ~/. ssh</code></pre><h2 id="将hexo-部署到-github"><a href="#将hexo-部署到-github" class="headerlink" title="将hexo 部署到 github"></a>将hexo 部署到 github</h2><p>&emsp; 打开文件 配置文件 <strong>_config.yml</strong><br>修改配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;absonczc&#x2F;absonczc.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>&emsp;2.安装deploy-git，这样才能部署到github上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>&emsp;然后【清理】-【生成】-【部署】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean    &#x2F;&#x2F;清理之前生成的，可忽略该步骤</span><br><span class="line">hexo generate &#x2F;&#x2F;生成静态文章，可以简写成 g</span><br><span class="line">hexo deploy   &#x2F;&#x2F;部署文章 可以简写成 d</span><br></pre></td></tr></table></figure>
<p><strong>注意了 执行到最后部署可能需要让你输入账号密码</strong></p>
<p><img src="./hello-world/github_login.png" alt="github登陆"></p>
<!-- https://blog.csdn.net/Fitz1318/article/details/86548129 -->



<h2 id="设置个人域名–后续"><a href="#设置个人域名–后续" class="headerlink" title="设置个人域名–后续"></a>设置个人域名–后续</h2><hr>
<h2 id="结语。"><a href="#结语。" class="headerlink" title="结语。"></a>结语。</h2><p>&emsp; 如果你完成了以上步骤，那么就去浏览下你的blog，网址是:username.github.io</p>
]]></content>
  </entry>
</search>
